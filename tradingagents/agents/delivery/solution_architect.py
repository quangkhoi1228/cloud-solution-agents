from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
import time
import json
from langgraph.types import Command, interrupt

from langchain_core.messages import AIMessage

from tradingagents.agents.utils.company_utils import get_company_info
from tradingagents.dataflows.interface import create_file


def create_solution_architect(llm, toolkit):
    def solution_architect_node(state):

        if "solution_architect_report" in state and state["solution_architect_report"]:
            create_file(
                f"{state['folder_path']}/solution_architect_report.md", state["solution_architect_report"])
            return {
                "messages": [AIMessage(content="ƒê√£ c√≥ th√¥ng tin gi·∫£i ph√°p ƒë·ªÅ xu·∫•t cho kh√°ch h√†ng")],
                "solution_architect_report": state["solution_architect_report"],
            }
            
        tools = [
            # toolkit.create_project_folder,
        ]
        
        user_requirements = state["user_requirements"]


        system_message = f"""B·∫°n l√† m·ªôt Chuy√™n gia gi·∫£i ph√°p h·∫° t·∫ßng Solution Architect t·∫°i FPT Smart Cloud (FCI) {get_company_info()}.

M·ª§C TI√äU:
Nhi·ªám v·ª• c·ªßa b·∫°n l√† x√¢y d·ª±ng ph∆∞∆°ng √°n chuy·ªÉn ƒë·ªïi h·ªá th·ªëng c·ªßa kh√°ch h√†ng t·ª´ on-premise sang h·∫° t·∫ßng FPT Cloud (FCI), ƒë·∫£m b·∫£o:
- ƒê·∫£m b·∫£o b·∫£o m·∫≠t, hi·ªáu nƒÉng, v√† t√≠nh s·∫µn s√†ng cao.
- K·∫øt n·ªëi th√¥ng su·ªët gi·ªØa on-prem v√† cloud trong giai ƒëo·∫°n chuy·ªÉn ti·∫øp.
- C√≥ kh·∫£ nƒÉng backup & restore d·ªØ li·ªáu trong su·ªët qu√° tr√¨nh migration.
- ƒê·∫ßu ra l√† 1 ƒëo·∫°n report v·ªÅ y√™u c·∫ßu h·∫° t·∫ßng cloud, kh√¥ng c√≥ c√°c c√¢u h·ªèi hay ƒë·ªám ngo√†i y√™u c·∫ßu c·ªßa KH
Y√äU C·∫¶U
1. **V·∫Ω s∆° ƒë·ªì ki·∫øn tr√∫c h·ªá th·ªëng cloud (Mermaid)** th·ªÉ hi·ªán m√¥ h√¨nh chuy·ªÉn ƒë·ªïi: d·ª±a v√†o th√¥ng tin ƒë·∫ßu v√†o hi·ªán c√≥ v√† y√™u c·∫ßu h·∫° t·∫ßng cloud.

- Y√™u c·∫ßu c·ªßa kh√°ch h√†ng: {user_requirements}

2. **V·∫Ω s∆° ƒë·ªì c√°c b∆∞·ªõc th·ª±c hi·ªán** ƒë·ªÉ chuy·ªÉn ƒë·ªïi h·ªá th·ªëng t·ª´ on-premise sang cloud (t·ªëi ƒëa 5 b∆∞·ªõc)

3. **V·∫Ω b·∫£ng c√°c b∆∞·ªõc ch√≠nh** ƒë·ªÉ chuy·ªÉn ƒë·ªïi h·ªá th·ªëng t·ª´ on-premise sang cloud chi ti·∫øt h∆°n cho t·ª´ng b∆∞·ªõc.

4. **V·∫Ω b·∫£ng c√°c s·∫£n ph·∫©m s·ª≠ d·ª•ng (BOM)** ƒë·ªÉ chuy·ªÉn ƒë·ªïi h·ªá th·ªëng t·ª´ on-premise sang cloud cho KH theo y√™u c·∫ßu.
    
V√ç D·ª§ C·ª§ TH·ªÇ:
- y√™u c·∫ßu c·ªßa KH: 
    # Y√™u c·∫ßu h·∫° t·∫ßng t·ª´ kh√°ch h√†ng:
    - H·ªá th·ªëng c·∫ßn migrate t·ª´ on‚Äëpremise l√™n FPT Smart Cloud.
    - G·ªìm 1 website c√° nh√¢n d√πng NestJS v√† 1 database PostgreSQL, ch·∫°y chung tr√™n 1 VM.
    - VM y√™u c·∫ßu c·∫•u h√¨nh: 4 vCPU, 8 GB RAM, 500 GB SSD, c√≥ public IP.
    - Dung l∆∞·ª£ng d·ªØ li·ªáu hi·ªán t·∫°i l√† kho·∫£ng 1 TB.

    # C√°c th√¥ng tin ƒë·∫ßu v√†o hi·ªán c√≥:
    - Ki·∫øn tr√∫c h·ªá th·ªëng: Web + Database ch·∫°y tr√™n c√πng VM.
    - H·∫° t·∫ßng VM on‚Äëpremise: 4 vCPU / 8 GB RAM / 500 GB SSD.
    - Network: C√≥ public IP g√°n s·∫µn.
    - Dung l∆∞·ª£ng d·ªØ li·ªáu: Kho·∫£ng 1 TB.
    - Use-case ch·ªß y·∫øu: Migration sang m√¥i tr∆∞·ªùng cloud c·ªßa FPT Smart Cloud.
    
- Th√¨ output report s·∫Ω bao g·ªìm ti√™u ƒë·ªÅ v√† n·ªôi dung sau:

## Gi·∫£i ph√°p ƒë·ªÅ xu·∫•t
    ```mermaid
        flowchart TB
            subgraph s1["On-Premise"]
                    OPVM["VM: NestJS &amp; PostgreSQL<br>4vCPU / 8GB RAM / 500GB SSD<br>Public IP"]
                    OPIP["Public IP"]
            end
            subgraph VPC["VPC"]
                    CloudVM["Cloud VM: NestJS &amp; PostgreSQL<br>4vCPU / 8GB RAM / 500GB SSD<br>Public IP"]
                    CloudIP["Public IP"]
            end
            subgraph subGraph2["FPT Smart Cloud"]
                    VPC
                    Storage["Object Storage<br>1TB backup data"]
            end
                OPVM --> OPIP
                CloudVM --> CloudIP
                OPVM -- Backup --> Storage
                InternetNode["Internet"] --> OPIP & CloudIP
    ```
    
## Ph∆∞∆°ng √°n chuy·ªÉn ƒë·ªïi
    ```mermaid
        flowchart LR
        A[üìå 1. Kh·∫£o s√°t &<br>Ph√¢n t√≠ch h·ªá th·ªëng]
        B[üõ†Ô∏è 2. Chu·∫©n b·ªã<br>H·∫° t·∫ßng Cloud]
        C[‚òÅÔ∏è 3. Di chuy·ªÉn<br>D·ªØ li·ªáu & ·ª®ng d·ª•ng]
        D[üöÄ 4. Ki·ªÉm th·ª≠,<br>Go-live & Gi√°m s√°t]

        A --> B --> C --> D

        %% Styling
        classDef phase fill:#e3f2fd,stroke:#2196f3,color:#0d47a1,font-weight:bold;
        class A,B,C,D phase;
    ```
    
    **M√¥ t·∫£:**
    | B∆∞·ªõc                                 | M√¥ t·∫£                                                                    |
    | ------------------------------------ | ------------------------------------------------------------------------ |
    | **1. Kh·∫£o s√°t & Ph√¢n t√≠ch h·ªá th·ªëng** | ƒê√°nh gi√° h·ªá th·ªëng hi·ªán t·∫°i, t√†i nguy√™n VM, d·ªØ li·ªáu c·∫ßn migrate           |
    | **2. Chu·∫©n b·ªã H·∫° t·∫ßng Cloud**        | T·∫°o VM tr√™n FPT Cloud v·ªõi c·∫•u h√¨nh t∆∞∆°ng ƒë∆∞∆°ng, thi·∫øt l·∫≠p m·∫°ng, firewall  |
    | **3. Di chuy·ªÉn D·ªØ li·ªáu & ·ª®ng d·ª•ng**  | Backup + chuy·ªÉn d·ªØ li·ªáu (SCP/Object Storage), c√†i app, kh√¥i ph·ª•c DB      |
    | **4. Ki·ªÉm th·ª≠, Go-live & Gi√°m s√°t**  | Ki·ªÉm tra to√†n h·ªá th·ªëng, chuy·ªÉn DNS, thi·∫øt l·∫≠p gi√°m s√°t & backup ƒë·ªãnh k·ª≥  |
    

## Danh s√°ch s·∫£n ph·∫©m s·ª≠ d·ª•ng (BOM)

| T√™n s·∫£n ph·∫©m             | M√¥ t·∫£                                                   | S·ªë l∆∞·ª£ng | ƒê∆°n v·ªã t√≠nh | Ghi ch√∫                                            |
| ------------------------ | ------------------------------------------------------- | -------- | ----------- | -------------------------------------------------- |
| **vCPU**                 | S·ªë nh√¢n x·ª≠ l√Ω cho Cloud VM                              | 4        | vCPU        | ƒê√°p ·ª©ng nhu c·∫ßu x·ª≠ l√Ω NestJS v√† PostgreSQL         |
| **RAM**                  | B·ªô nh·ªõ cho Cloud VM                                     | 8        | GB          | ƒê·∫£m b·∫£o hi·ªáu nƒÉng x·ª≠ l√Ω web v√† truy v·∫•n database   |
| **SSD**                  | L∆∞u tr·ªØ c·ª•c b·ªô cho Cloud VM                             | 512      | GB          | L∆∞u ·ª©ng d·ª•ng, h·ªá ƒëi·ªÅu h√†nh, PostgreSQL             |
| **Public IP tƒ©nh**       | ƒê·ªãa ch·ªâ IP ƒë·ªÉ truy c·∫≠p VM t·ª´ Internet                   | 1        | IP          | G√°n tr·ª±c ti·∫øp cho VM, ph·ª•c v·ª• Web & SSH            |
| **Object Storage**       | L∆∞u tr·ªØ d·ªØ li·ªáu backup dung l∆∞·ª£ng 1TB                   | 1024     | GB          | L∆∞u d·ªØ li·ªáu l·ªãch s·ª≠, backup ƒë·ªãnh k·ª≥ ngo√†i VM       |
| **Snapshot VM**          | T·ª± ƒë·ªông sao l∆∞u to√†n b·ªô VM                              | 1        | b·∫£n         | L√™n l·ªãch backup ƒë·ªãnh k·ª≥, ph·ª•c h·ªìi nhanh khi c·∫ßn    |
| **Firewall & VPC**       | M·∫°ng ri√™ng ·∫£o v√† t∆∞·ªùng l·ª≠a b·∫£o v·ªá t√†i nguy√™n            | 1        | g√≥i         | C·∫•u h√¨nh rule cho Web (80/443), DB (5432), SSH     |
| **Monitoring & Logging** | Gi√°m s√°t t√†i nguy√™n, g·ª≠i c·∫£nh b√°o, l∆∞u tr·ªØ log h·ªá th·ªëng | 1        | g√≥i         | C√≥ th·ªÉ d√πng b·∫£n mi·ªÖn ph√≠ ban ƒë·∫ßu, n√¢ng c·∫•p khi c·∫ßn |


# Important:
- Output ho√†n to√†n l√† ti·∫øng Vi·ªát
- Kh√¥ng ƒë∆∞a c√°c th√¥ng tin ngo√†i v√†o nh∆∞ gi·ªõi thi·ªáu
- Ch·ªâ c√≥ chart mermaid"""

        prompt = ChatPromptTemplate.from_messages(
            [
                (
                    "system",
                    system_message,

                ),
                MessagesPlaceholder(variable_name="messages"),
            ]
        )

        prompt = prompt.partial(tool_names=", ".join(
            [tool.name for tool in tools]))

        chain = prompt | llm.bind_tools(tools)
        result = chain.invoke(state["messages"])

        print("state solution architect: ", state)
        print("result: ", result.pretty_print())
        report = ""

        if len(result.tool_calls) == 0:
            report = result.content
            
        create_file(f"{state['folder_path']}/solution_architect_report.md", report)
            
        return {
            "messages": [result],
            "solution_architect_report": report,
        }

    return solution_architect_node
